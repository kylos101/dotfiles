# Exec into ws-daemon
function exec-daemon() {
    if [ ! -z "$1" ]; then
      kubectl exec -it "$1" -c ws-daemon -- sh -c "cd /mnt/workingarea;sh"
      return
    fi

    local daemon=$(kubectl get pods -o custom-columns=Name:.metadata.name | grep ws-daemon)
    if [ -z "$daemon" ]; then
      echo "ws-daemon not found"
      return
    fi

    if (( $(grep -c . <<< "$daemon") > 1 )); then
      readarray -t instances <<< "$daemon"
      select i in "${instances[@]}"
      do
        kubectl exec -it "$i" -c ws-daemon -- sh -c "cd /mnt/workingarea;sh"
        return
      done
      return
    fi

    kubectl exec -it "$daemon" -c ws-daemon -- sh -c "cd /mnt/workingarea;sh"
}

# Exec into host
function exec-host() {
    local daemon=$(kubectl get pods -o custom-columns=Name:.metadata.name | grep ws-daemon)
    if [ -z "$daemon" ]; then
      echo "ws-daemon not found"
      return
    fi

    if (( $(grep -c . <<< "$daemon") > 1 )); then
      readarray -t instances <<< "$daemon"
      select i in "${instances[@]}"
      do
        kubectl exec -it "$i" -c ws-daemon -- sh -c "nsenter -t 1 -p -u -m -n bash"
        return
      done
      return
    fi

    kubectl exec -it "$daemon" -c ws-daemon -- sh -c "nsenter -t 1 -p -u -m -n bash"
}

# Get daemon logs
function log-daemon() {
    if [ ! -z "$1" ]; then
      kubectl logs "$1" -c ws-daemon
      return
    fi

    local daemon=$(kubectl get pods -o custom-columns=Name:.metadata.name | grep ws-daemon)
    if [ -z "$daemon" ]; then
      echo "ws-daemon not found"
      return
    fi

    if (( $(grep -c . <<< "$daemon") > 1 )); then
      readarray -t instances <<< "$daemon"
      select i in "${instances[@]}"
      do
        kubectl logs "$i" -c ws-daemon
        return
      done
      return
    fi

    kubectl logs "$daemon" -c ws-daemon
}

function tail-prebuild() {
  kubectl exec -it "$1" -- tail -f /workspace/.gitpod/prebuild-log-0
}

function ssh-workspace-node() {
  gcloud config set project workspace-clusters
  gcloud config unset compute/region
  gcloud config unset compute/zone
  gcloud compute ssh "$1" --ssh-flag="-p 2222"
}

function watch-prebuilds() {
  watch "kubectl get pods -o wide --sort-by=.spec.nodeName | grep prebuild"
}

function top-workspaces() {
  watch "kubectl top pods -l component=workspace --sort-by=cpu | head -n 20"
}

function workspace-count() {
  kubectl get pods -o wide -l component=workspace --sort-by=.spec.nodeName -o custom-columns=:.spec.nodeName  | grep "\S" | uniq -c | sort -nr -k1,1
}

function get-workspace-details() {
  if [ -z "$1" ]; then
    kubectl get pods --sort-by=.spec.nodeName  --selector=component=workspace -o jsonpath='{range .items[*]}{.metadata.labels.metaID}{"\t"}{.status.phase}{"\t"}{.metadata.name}{"\t\t"}{.spec.nodeName}{"\t"}{.spec.containers[].env[?(@.name=="GITPOD_GIT_USER_EMAIL")].value}{"\t"}{.spec.containers[].env[?(@.name=="GITPOD_IDE_ALIAS")].value}{"\t"}{.spec.containers[].env[?(@.name=="GITPOD_WORKSPACE_CONTEXT_URL")].value}{"\n"}{end}'
    return
  fi

  kubectl get pods "$1" -o jsonpath='{.metadata.labels.metaID}{"\t"}{.status.phase}{"\t"}{.metadata.name}{"\t\t"}{.spec.nodeName}{"\t"}{.spec.containers[].env[?(@.name=="GITPOD_GIT_USER_EMAIL")].value}{"\t"}{.spec.containers[].env[?(@.name=="GITPOD_IDE_ALIAS")].value}{"\t"}{.spec.containers[].env[?(@.name=="GITPOD_WORKSPACE_CONTEXT_URL")].value}{"\n"}'
}

function connection-count() {
  echo "netstat -anpt 2>&1 | tail -n +5 | awk '{print $7,$6}' | sort -k1,1 -k3,3 \
    | sed 's#/# #' | column -t | uniq -c"
}

function remove-neverready-workspaces() {
  kubectl get pod -o json -l component=workspace -l headless=false | jq -r '.items[] | select(.metadata.deletionTimestamp != null and .metadata.annotations["gitpod/never-ready"] != null ) | .metadata.name' | xargs -P 20 -I {} bash -c "kubectl patch pod {} -p '{\"metadata\":{\"finalizers\":null}}' --type=merge"
}

function show-neverready-workspaces() {
  kubectl get pod -o json -l component=workspace -l headless=false | jq -r '.items[] | select(.metadata.deletionTimestamp != null and .metadata.annotations["gitpod/never-ready"] != null ) | .metadata.name' | column | xargs kubectl get pods -o wide
}

function remove-neverready-prebuilds() {
  kubectl get pod -o json -l component=workspace -l headless=true | jq -r '.items[] | select(.metadata.deletionTimestamp != null and .metadata.annotations["gitpod/never-ready"] != null ) | .metadata.name' | xargs -P 20 -I {} bash -c "kubectl patch pod {} -p '{\"metadata\":{\"finalizers\":null}}' --type=merge"
}

function show-neverready-prebuilds() {
  kubectl get pod -o json -l component=workspace -l headless=true | jq -r '.items[] | select(.metadata.deletionTimestamp != null and .metadata.annotations["gitpod/never-ready"] != null ) | .metadata.name' | column | xargs kubectl get pods -o wide
}
